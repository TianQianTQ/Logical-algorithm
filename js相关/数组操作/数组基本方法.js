/*** Array.of ()   ES6 * 用于将一组值，转换为数组 * 目的：弥补数组构造函数Array()由于参数不同返回不同的不足 * 作用：总是返回参数值组成的数组，如果没有参数，则返回一个空数组* *//*Array();  // []Array(3);   // [, , ,]Array(3, 11, 8);   // [3, 11, 8]Array.of();   // []Array.of(undefined);   // [undefined]Array.of(1);   // [1]Array.of(1,2);   // [1, 2]//模拟实现function ArrayOf(){    return [].slice.call(arguments);}*//** * Array.from ()   ES6 * 用于将两类对象转换为真正的数组：类似数组的对象、可遍历的对象（ES6 新增的数据结构 Set 和 Map） * 备注：任何有length属性的对象，都可以通过该方法转换为数组 * 常用类似数组的对象为DOM操作返回的NodeList 集合、函数内部的arguments对象 * 只要是部署了 Iterator 接口的数据结构，Array.from都能将其转为数组。 * 扩展运算符（...）也可以将某些数据结构转为数组。 * 第二个参数，类似map，对每个值进行处理，处理的值放入返回数组 * 第三个参数：绑定this如果map函数里面用到了this关键字，还可以传入Array.from的第三个参数，用来绑定this * *//*let arrayLike = {    '0': 'a',    '1': 'b',    '2': 'c',    length: 3};// ES5的写法let arr1 = [].slice.call(arrayLike);   // ['a', 'b', 'c']// ES6的写法let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']// NodeList对象let ps = document.querySelectorAll('p');Array.from(ps).filter(p => {    return p.textContent.length > 100;});// arguments对象function foo() {    var args = Array.from(arguments);}// 字符串和set结构都部署了Iterator接口Array.from('hello')// ['h', 'e', 'l', 'l', 'o']let namesSet = new Set(['a', 'b'])Array.from(namesSet) // ['a', 'b']// 如果参数是一个真正的数组，Array.from会返回一个一模一样的新数组。Array.from([1, 2, 3])// [1, 2, 3]// 值得提醒的是，扩展运算符（...）也可以将某些数据结构转为数组。// arguments对象function foo() {    const args = [...arguments];}// NodeList对象[...document.querySelectorAll('div')]Array.from({ length: 3 });// [ undefined, undefined, undefined ]//兼容：const toArray = (() =>        Array.from ? Array.from : obj => [].slice.call(obj))();// 接收第二个参数  作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。Array.from(arrayLike, x => x * x);// 等同于Array.from(arrayLike).map(x => x * x);Array.from([1, 2, 3], (x) => x * x)// [1, 4, 9]// 如果map函数里面用到了this关键字，还可以传入Array.from的第三个参数，用来绑定this。// 可以将各种值转为真正的数组，并且还提供map功能。// 这实际上意味着，只要有一个原始的数据结构，你就可以先对它的值进行处理，然后转成规范的数组结构，进而就可以使用数量众多的数组方法。Array.from({ length: 2 }, () => 'jack')// ['jack', 'jack']// 另一个应用是，将字符串转为数组，然后返回字符串的长度。// 因为它能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于\uFFFF的 Unicode 字符，算作两个字符的 bug。function countSymbols(string) {    return Array.from(string).length;}*//** *  改变原数组的方法： *  ES5: *  splice()/  push() / pop() / shift() / unshift() / sort() / reverse() *  ES6: * copyWithin() / fill* *//** * splice() 添加/删除数组元素 * 定义： splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目 * 返回值: 如果有元素被删除,返回包含被删除项目的新数组。 * 基本操作: * 删除splice(a,b):   a:要删除的第1项的位置，b:要删除的项数 * 插入splice(a,0,b):   a:起始位置，b:插入的数据，可多个 * 替换splice(a,b,c):   a:起始位置，b:要替换的数据  c:替换数据 * 始终返回一个数组，包含从原始数据删除的项 *///  eg1:删除元素let a = [1, 2, 3, 4, 5, 6, 7];let item = a.splice(0, 3); // [1,2,3]console.log(a); // [4,5,6,7]// 从数组下标0开始，删除3个元素// eg2: 删除并添加let a = [1, 2, 3, 4, 5, 6, 7];let item = a.splice(0,3,'添加'); // [1,2,3]console.log(a); // ['添加',4,5,6,7]// 从数组下标0开始，删除3个元素，并添加元素'添加'let b = [1, 2, 3, 4, 5, 6, 7];let item = b.splice(-2,3,'添加1','添加2'); // [6,7]console.log(b); // [1,2,3,4,5,'添加1','添加2']// 从数组最后第二个元素开始，删除3个元素，并添加两个元素'添加1'、'添加2'// eg3: 不删除只添加:    let a = [1, 2, 3, 4, 5, 6, 7];let item = a.splice(0,0,'添加1','添加2'); // [] 没有删除元素，返回空数组console.log(a); // ['添加1','添加2',1,2,3,4,5,6,7]let b = [1, 2, 3, 4, 5, 6, 7];let item = b.splice(-1,0,'添加1','添加2'); // [] 没有删除元素，返回空数组console.log(b); // [1,2,3,4,5,6,'添加1','添加2',7] 在最后一个元素的前面添加两个元素/** * sort 数组排序 * 定义：sort()方法用于对数组元素进行排序，并返回这个数组 * 参数：可传入比较函数，参数为a,b * 比较函数返回值 < 0  a在b前 * 比较函数返回值 = 0  a  b 相对位置不变 * 比较函数返回值 > 0  b在a前 */// 字符串排列 看起来很正常var a = ["Banana", "Orange", "Apple", "Mango"];a.sort(); // ["Apple","Banana","Mango","Orange"]// 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的var	a = [10, 1, 3, 20,25,8];console.log(a.sort()) // [1,10,20,25,3,8];// 传入函数array.sort(function(a,b){    return a-b;});console.log(array); // [1,3,4,4,8,10,20,25];/** * push 在数组末尾添加元素 * 定义：在数组的末尾添加一个或多个元素，并返回新的长度 * 参数：添加到数组末尾的元素 */let  a =  [1,2,3];let item = a.push('末尾');  // 4console.log(a); // [1,2,3,'末尾']/** * pop() 删除数组中最后一个元素 * 定义:删除一个数组中的最后一个元素，并返回这个元素 * 参数：无 */let  a =  [1,2,3];let item = a.pop();  // 3console.log(a); // [1,2]/** * shift() 删除数组的第一个元素 * 定义：删除数组的第一个元素，并返回这个元素 * 参数：无 */let  a =  [1,2,3];let item = a.shift();  // 1console.log(a); // [2,3]/** * unshift() 在数组头添加一个或多个元素 * 定义：向数组的开头添加一个或多个元素，并返回数组的新的长度 * 参数：添加的元素 */let  a =  [1,2,3];let item = a.unshift('开头');  // 4console.log(a); // ['开头',1,2,3]/** * reverse() 颠倒数组元素顺序 * 定义：reverse() 方法用于颠倒数组中元素的顺序。 * 参数：无 */let  a =  [1,2,3];a.reverse();console.log(a); // [3,2,1]/** * ES6  copyWithin() 指定位置的成员复制到其他位置 * 定义：在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。 * 参数：target（必需）：从该位置开始替换数据。如果为负值，表示倒数。 * start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。 * end（可选）：到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。 */// -2相当于3号位，-1相当于4号位[1, 2, 3, 4, 5].copyWithin(0, -2, -1)// [4, 2, 3, 4, 5]/** * ES6: fill() 填充数组 * 定义:  使用给定值，填充一个数组。 * 参数: * 第一个元素(必须): 要填充数组的值 * 第二个元素(可选): 填充的开始位置,默认值为0 * 第三个元素(可选)：填充的结束位置，默认是为this.length */['a', 'b', 'c'].fill(7)// [7, 7, 7]['a', 'b', 'c'].fill(7, 1, 2)// ['a', 7, 'c']/** *  不改变原数组的方法： *  ES5: *  slice() / join() / toLocateString() / toStrigin() / cancat() / indexOf() / lastIndexOf() *  ES7: *  includes * *//** * slice() 浅拷贝数组元素 * 定义：返回数组一部分浅拷贝到一个新的数组，原数组不会被修改 * 注意：字符串有slice方法提取字符串 * 语法: array.slice(begin,end); * 参数：begin(可选)，索引数值，接受负值，从索引处开始提取数组中的元素值，默认为0 *       end（可选），接受负值，在该索引处结束取元素，默认值为数组尾部（包括最后一个元素） * 特别注意：新数组是浅拷贝，若元素是复杂数据类型，改变其中一个，另一个也会随之改变！！ */let a= ['hello','world'];let b=a.slice(0,1); // ['hello']console.log(a);  // ['hello','world'];console.log(b);  // ['hello']/** * join() 数组转字符串 * 定义：把数组中的所有元素通过指定分隔符进行分隔放入一个字符串中，返回生成的字符串 * 语法：array.join(str) * 参数:str，可选，分隔符 */let a= ['hello','world'];let str=a.join(); // 'hello,world'let str2=a.join('+'); // 'hello+world'// 对象转字符串推荐使用JSON.stringify(obj);/** * toLocaleString() 数组转字符串 * 定义：返回一个表示数组元素的字符串 * 说明：数组中的每个值都会调用toLocaleString()方法 * 语法：array.toLocaleString() */let a = [{name:'12'},23,'abcd',new Date()];let str = a.toLocaleString();console.log(str);  // [object Object],23,abcd,2018/8/19 下午1:39:06/** * toString() 数组转字符串  不推荐 * 定义：把数组转为由逗号连接起来的字符串 * array.toString(); */let g = ['abc','def'].toString();console.log(g);/** * concat 合并两个或多个数组，返回一个新数组 */let a = [1,2,3];let b = [4,5,6];let c = a.concat(b);  // [1, 2, 3, 4, 5, 6]/** * ES6  ... 合并数组 */let a = [1,2,3];let b = [4,...a,5,6];  // [4, 1, 2, 3, 5, 6]/** * indexOf()  查找数组中含有某个元素，返回下标 * 定义：找到数组存在元素的第一个索引，若未找到则返回-1 * 参数：searchElement(必须):被查找的元素 *      fromIndex(可选):开始查找的位置 * 说明：严格相等的搜索 ，不能识别NaN */let a=['啦啦',2,4,24,NaN]a.indexOf('啦');  // -1a.indexOf('NaN');  // -1a.indexOf('啦啦'); // 0/** * lastIndexOf() 查找指定元素在数组中的最后一个位置 * 定义：方法返回指定元素在数组中的最后一个索引，若不存在则返回-1 * 参数：searchElement(必须):被查找的元素 *      fromIndex(可选):开始查找的位置 *          正值：>=数组长度，则整个数组都会被查找 *          负值：从数组末尾向前的偏移 -2则是倒数第二个元素开始往前 *          负值：绝对值大于数组长度则方法返回-1 *//** * includes() 查找数组是否包含某个元素，返回布尔 * 定义：返回一个布尔值，表示某个数组是否包含给定的值 * 语法：array.includes(searchElement,fromIndex=0) * 参数： searchElement(必须):被查找的元素 *       fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。 *          正值超过数组长度，数组不会被搜索，返回false。 *          负值绝对值超过长数组度，重置从0开始搜索。 * 说明：弥补indexOf不能识别NaN,检测不够语义化（返回-1） */let a = ['ds',NaN,1];let b = a.includes(NaN);   // truelet c = a.includes('ds');  // truelet d = a.includes(1,100); // false  超过数组长度不搜索let e = a.includes(1,-100); // true  负值绝对值超过数组长度，搜索整个数组/** * 遍历方法 12个 * ES5： * forEach、every 、some、 filter、map、reduce、reduceRight、 * ES6： * find、findIndex、keys、values、entries *//** * forEach 按升序对数组有效值执行回调函数 * array.forEach(function(item,index,arr)) * 参数：function(必须)所调用的函数 *      item:数组当前元素值 *      index:当前元素索引 *      arr:数组对象本身 * 注意：没有返回值 */let a = [1,2,,3];let res = a.forEach(function(value,index,arr){    a[3] = '改变';    a.push('添加');    console.log(a); // 执行添加三次 添加  ) [1, 2, empty, "改变", "添加"]  [1, 2, empty, "改变", "添加", "添加"]    return value; // 只结束本次回调，会执行下次回调    console.log('zhixing');})console.log(res);   // undefined/** * every 检测数组所有元素是否都符合判断条件 * array.every(function(value, index, arr)) * 说明：数组检测到有一个元素不满足，则整个表达式返回false，剩余元素不再进行检测 *      所有元素条件都满足返回true */let a = [1,3,5,7,9];let res = a.every(function(value,index,arr){    return value >2;})// false// 接受箭头函数写法    a.every(x => x >= 1);   // true/** * some 数组中的是否有满足判断条件的元素 * 定义：数组中的是否有满足判断条件的元素 * 语法：array.some(function(value, index, arr)) * 说明：有一个元素满足条件返回true，其他元素不再检测 * 所有元素都不满足条件，则返回false */let a = [1,3,5,7,9];let res = a.some(function(value,index,arr){    return value >2;})    // true/** * filter 过滤原始数组，返回新数组 * 定义: 返回一个新数组, 其包含通过所提供函数实现的测试的所有元素。 * 语法： let new_array = arr.filter(function(value, index, arr)) */let a = [1,2,3,4,5];let res = a.filter(function(value,index,array){    return value > 2})    // [3,4,5]/** * map 对数组中的每个元素进行处理，返回新的数组 * 定义：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。 * 语法：let new_array = arr.map(function(value, index, arr)) */let a = [1,2,3,4,5];let res = a.map(function(value,index,arr){    return value+1;})    // [2,3,4,5,6]/** * reduce 为数组提供累加器，合并为一个值 * 定义：reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，最终合并为一个值。 * 语法：array.reduce(function(prev, cur, index, arr)) * 参数：prev前一个值   cur当前值   index  项的索引   arr  数组对象 */// 数组求和    let a = [1,2,3,4];    let res = a.reduce(function(a,b){        return a+b;    })  // 10// 展开数组（将二维数组转换为一维）    let b = [1,[2,[3,4],5],6];    let res = b.reduce(        (a,b)=> a.concat(b),[]) // [1, 2, Array(2), 5, 6]/** * reduceRight  从右至左累加 * 这个方法除了与reduce执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。 *//** * ES6：find()  & findIndex() 根据条件找到数组成员 * find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回undefined。 * findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。 * 语法：let new_array = arr.find(function(currentValue, index, arr), thisArg) * let new_array = arr.findIndex(function(currentValue, index, arr), thisArg) */// findlet a = [1, 4, -5, 10].find((n) => n < 0); // 返回元素-5let b = [1, 4, -5, 10,NaN].find((n) => Object.is(NaN, n));  // 返回元素NaN// findIndexlet a = [1, 4, -5, 10].findIndex((n) => n < 0); // 返回索引2let b = [1, 4, -5, 10,NaN].findIndex((n) => Object.is(NaN, n));  // 返回索引4/** * ES6 keys()&values()&entries() 遍历键名、遍历键值、遍历键名+键值 * 定义：三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值。 * 语法：array.keys()   array.values()  array.entries() */    for (let index of ['a', 'b'].keys()) {        console.log(index);    }// 0// 1for (let elem of ['a', 'b'].values()) {    console.log(elem);}// 'a'// 'b'for (let [index, elem] of ['a', 'b'].entries()) {    console.log(index, elem);}// 0 "a"// 1 "b"/*在for..of中如果遍历中途要退出，可以使用break退出循环。如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历:*/    let letter = ['a', 'b', 'c'];let entries = letter.entries();console.log(entries.next().value); // [0, 'a']console.log(entries.next().value); // [1, 'b']console.log(entries.next().value); // [2, 'c']